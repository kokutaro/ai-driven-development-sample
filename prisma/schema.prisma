generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  todos         Todo[]
  categories    Category[]
  kanbanColumns KanbanColumn[]
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  userRoles     UserRole[]

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   // HEX color code
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos Todo[]

  @@map("Category")
}

model Todo {
  id              String    @id @default(cuid())
  title           String
  description     String?
  dueDate         DateTime?
  isImportant     Boolean   @default(false)
  isCompleted     Boolean   @default(false)
  order           Int       @default(0)
  categoryId      String?
  kanbanColumnId  String?
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  kanbanColumn  KanbanColumn?  @relation(fields: [kanbanColumnId], references: [id], onDelete: SetNull)
  subTasks      SubTask[]
  reminders     Reminder[]

  @@map("Todo")
}

model SubTask {
  id          String   @id @default(cuid())
  title       String
  isCompleted Boolean  @default(false)
  order       Int      @default(0)
  todoId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  todo Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)

  @@map("SubTask")
}

model Reminder {
  id          String   @id @default(cuid())
  reminderAt  DateTime
  isTriggered Boolean  @default(false)
  todoId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  todo Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)

  @@map("Reminder")
}

model KanbanColumn {
  id        String   @id @default(cuid())
  name      String
  color     String   // HEX color code
  order     Int      @default(0)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos Todo[]

  @@map("KanbanColumn")
}

model ApiKey {
  id         String    @id @default(cuid())
  name       String
  keyHash    String    @unique
  userId     String
  lastUsedAt DateTime?
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ApiKey")
}

// RBAC (Role-Based Access Control) models

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // admin, editor, viewer
  displayName String   // 管理者, 編集者, 閲覧者
  description String?
  isSystem    Boolean  @default(false) // システム組み込みロール
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("Role")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // read_todo, write_todo, delete_todo
  displayName String   // タスク読み取り, タスク書き込み, タスク削除
  description String?
  resource    String   // todo, category, user
  action      String   // read, write, delete, manage
  isSystem    Boolean  @default(true) // システム組み込み権限
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@map("Permission")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, roleId])
  @@map("UserRole")
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([roleId, permissionId])
  @@map("RolePermission")
}

// Event Store model for Event Sourcing
model EventStore {
  id          String   @id @default(cuid())
  aggregateId String   // アグリゲートの識別子
  eventType   String   // イベントタイプ
  eventData   String   @db.Text // イベントデータ（JSON）
  metadata    String   @db.Text // メタデータ（JSON）
  version     Int      // アグリゲートのバージョン
  occurredAt  DateTime // イベント発生日時
  insertedAt  DateTime @default(now()) // EventStore挿入日時
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes for performance
  @@index([aggregateId, version])
  @@index([aggregateId, occurredAt])
  @@index([eventType, occurredAt])
  @@index([occurredAt])
  @@index([insertedAt])

  // Unique constraint for aggregate version to prevent concurrency issues
  @@unique([aggregateId, version])
  @@map("EventStore")
}